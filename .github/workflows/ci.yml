name: CI - Entrenamiento y Validación de Modelo
on:
  push:
    branches: [main]
  workflow_dispatch:
jobs:
  train-and-validate:
    runs-on: ubuntu-latest

    outputs:
      runs_path: ${{ steps.prepare_runs.outputs.mlruns_path }}


    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Preparar ruta de mlruns
        id: prepare_runs
        run: |
          mkdir -p mlruns 
          echo "mlruns_path=mlruns" >> $GITHUB_OUTPUT

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Instalar dependencias
        run: |
          pip install -r mlflow-deploy/requirements.txt       


      - name: Entrenar modelos
        run: |
          python src/train_LinearR.py 
          python src/train_Logistic.py
          python src/validate.py
        # 🛑 AQUÍ FORZAMOS EL DIRECTORIO DE TRABAJO para que MLflow escriba en ./mlruns
        working-directory: mlflow-deploy/
      
        

        
      # 🛑 ÚLTIMO PASO DEL JOB 1: Subir artefactos como ARTEFACTO DEL JOB
      - name: Save mlruns as Job Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mlruns-job-temp
          path: mlflow-deploy/mlruns/


# Job 2: Subir el Artefacto del JOB a GitHub Workflow
  upload-to-workflow:
    needs: train-and-validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Descargar Artifacts del Job Anterior
        uses: actions/download-artifact@v4
        with:
          name: mlruns-job-temp
          path: mlruns_downloaded/ # Descarga el contenido en una carpeta temporal

      # 🛑 PASO CLAVE: Subir el artefacto como artefacto de Workflow
      - name: Upload mlruns as Final Artifact
        uses: actions/upload-artifact@v4
        with:
          # 🛑 Usamos el nombre FINAL que el CD buscará.
          name: mlruns 
          # 🛑 La ruta es la carpeta descargada, más robusta.
          path: mlruns_downloaded/